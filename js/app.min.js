(function(){angular.module("app",["app.home","templates","ui.router"]).config(function($stateProvider,$urlRouterProvider){return $urlRouterProvider.otherwise("/home")})}).call(this),function(){angular.module("app.home",["app.widget","ui.router"]).config(function($stateProvider){return $stateProvider.state("home",{url:"/home",views:{main:{controller:"HomeController",templateUrl:"/home/home.html"}}})})}.call(this),function(){angular.module("app.permutation",[])}.call(this),function(){angular.module("app.widget",["app.permutation","ui.router"]).config(function($stateProvider){return $stateProvider.state("widget-builder",{url:"/widget-builder",views:{main:{controller:"WidgetBuilderController",templateUrl:"/widget/widget-builder.html"}}})})}.call(this),function(){angular.module("app.home").controller("HomeController",function($scope,widgetStore){return $scope.widgets=widgetStore.getWidgets(),$scope.deleteWidget=function(index){return widgetStore.deleteWidget(index)}})}.call(this),function(){angular.module("app.permutation").directive("kcPermutableAttributes",function(){return{restrict:"E",controller:"KcPermutableAttributesController",scope:{permutable_attributes:"=permutableAttributes",buildPermutations:"&buildPermutations"}}}).controller("KcPermutableAttributesController",function($scope){var setPermutableAttributes;return(setPermutableAttributes=function(_this){return function(){return _this.permutable_attributes=$scope.permutable_attributes}}(this))(),$scope.$watch("permutable_attributes",function(new_value,old_value){return new_value!==old_value?setPermutableAttributes():void 0}),this.addAttribute=function(key,value){var bucket;if(bucket=$scope.permutable_attributes[key],null==bucket)throw Error("Invalid: key '"+key+"'");return _.contains(bucket,value)?(console.warn("'"+value+"' already entered."),!1):(bucket.push(value),$scope.buildPermutations({permutable_attributes:$scope.permutable_attributes}),!0)},this})}.call(this),function(){angular.module("app.permutation").directive("kcPermutableInput",function(){return{require:"^kcPermutableAttributes",restrict:"E",templateUrl:"/permutation/_permutable-input.html",transclude:!0,scope:{name:"@name"},link:function(scope,element,attrs,kcPermutableAttributesController){return scope.input_id=_.uniqueId("permutatable_input_"),scope.state={value:"",is_required:null!=attrs.required},scope.isDisabled=function(){return _.isEmpty(scope.state.value)},scope.isRequired=function(){return null!=attrs.required&&0===kcPermutableAttributesController.permutable_attributes[scope.name].length},scope.submit=function(){var is_added;return is_added=kcPermutableAttributesController.addAttribute(scope.name,scope.state.value),is_added?scope.state.value="":void 0}}}})}.call(this),function(){angular.module("app.permutation").factory("permutationFactory",function(){return{permute:function(permutable_attributes,callback){var permutations,recurse;return permutations=[],recurse=function(keys,payload,position){var key,permutation,value,_i,_len,_ref,_results;if(null==payload&&(payload={}),null==position&&(position=0),position===keys.length)return permutation=_.clone(payload),"function"==typeof callback&&callback(permutation),void permutations.push(permutation);if(key=keys[position],0===permutable_attributes[key].length)return recurse(keys,payload,position+1);for(_ref=permutable_attributes[key],_results=[],_i=0,_len=_ref.length;_len>_i;_i++)value=_ref[_i],payload[key]=value,_results.push(recurse(keys,payload,position+1));return _results},recurse(Object.keys(permutable_attributes)),permutations}}})}.call(this),function(){angular.module("app.widget").controller("WidgetBuilderController",function($scope,$state,widgetStore){return $scope.submit=function($widgets){return console.log("look at all these widgets we built!"),console.table($widgets),widgetStore.addWidgets($widgets),$state.go("home")}})}.call(this),function(){angular.module("app.widget").directive("kcWidgetForm",function(){return{restrict:"E",controller:"KcWidgetFormController",templateUrl:"/widget/widget-form.html",scope:{onSubmit:"&onSubmit"}}}).controller("KcWidgetFormController",function($scope,widgetFactory){return $scope.state={common_attributes:{permutation_group_name:""},permutable_attributes:{name:[],description:[]}},$scope.widgets=[],$scope.buildPermutations=function(permutable_attributes){return $scope.widgets=widgetFactory.buildPermutations(permutable_attributes,$scope.state.common_attributes)},$scope.submit=function(){return $scope.onSubmit({$widgets:$scope.widgets})}})}.call(this),function(){angular.module("app.widget").factory("Widget",function(){var Widget;return Widget=function(){function Widget(_at_attributes){this.attributes=_at_attributes}return Widget}()})}.call(this),function(){angular.module("app.widget").factory("widgetFactory",function(permutationFactory){return{build:function(attributes){return attributes},buildPermutations:function(permutable_attributes,common_attributes){var widgets;if(null==common_attributes&&(common_attributes={}),null==permutable_attributes)throw Error("Missing: permutable_attributes");return widgets=[],permutationFactory.permute(permutable_attributes,function(_this){return function(permutation){var attributes;return attributes=_.extend(permutation,common_attributes),widgets.push(_this.build(attributes))}}(this)),widgets}}})}.call(this),function(){angular.module("app.widget").factory("widgetStore",function(){var widgets;return widgets=[{name:"Foowiz",description:"Descriptive description."}],{addWidgets:function(new_widgets){return widgets=widgets.concat(new_widgets)},getWidgets:function(){return widgets},deleteWidget:function(index){return widgets.splice(index,1)}}})}.call(this);